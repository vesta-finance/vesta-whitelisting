/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WhitelistingInterface extends utils.Interface {
  contractName: "Whitelisting";
  functions: {
    "DB_UNIT()": FunctionFragment;
    "TARGET_UNIT()": FunctionFragment;
    "claim(uint256,bytes32[])": FunctionFragment;
    "covertToEther(uint256)": FunctionFragment;
    "emergencyChangeRoot(bytes32)": FunctionFragment;
    "hasClaimed(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(address,address,uint256,uint256,bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vesta()": FunctionFragment;
    "vestingVesta()": FunctionFragment;
    "whitelistUserBought(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DB_UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TARGET_UNIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "covertToEther",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyChangeRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vesta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingVesta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistUserBought",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DB_UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_UNIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "covertToEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyChangeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vesta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingVesta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistUserBought",
    data: BytesLike
  ): Result;

  events: {
    "ActionRequired(address,uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionRequired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ActionRequiredEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amountVsta: BigNumber }
>;

export type ActionRequiredEventFilter = TypedEventFilter<ActionRequiredEvent>;

export type ClaimedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amountVsta: BigNumber }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Whitelisting extends BaseContract {
  contractName: "Whitelisting";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WhitelistingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DB_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      _usdcAmount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    covertToEther(
      _usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyChangeRoot(
      newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _vestaToken: string,
      _vestingVesta: string,
      _tokenPrice: BigNumberish,
      _totalSupply: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vesta(overrides?: CallOverrides): Promise<[string]>;

    vestingVesta(overrides?: CallOverrides): Promise<[string]>;

    whitelistUserBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DB_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    _usdcAmount: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  covertToEther(
    _usdcAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyChangeRoot(
    newRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _vestaToken: string,
    _vestingVesta: string,
    _tokenPrice: BigNumberish,
    _totalSupply: BigNumberish,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vesta(overrides?: CallOverrides): Promise<string>;

  vestingVesta(overrides?: CallOverrides): Promise<string>;

  whitelistUserBought(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DB_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _usdcAmount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    covertToEther(
      _usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyChangeRoot(
      newRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _vestaToken: string,
      _vestingVesta: string,
      _tokenPrice: BigNumberish,
      _totalSupply: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vesta(overrides?: CallOverrides): Promise<string>;

    vestingVesta(overrides?: CallOverrides): Promise<string>;

    whitelistUserBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ActionRequired(address,uint256)"(
      account?: null,
      amountVsta?: null
    ): ActionRequiredEventFilter;
    ActionRequired(
      account?: null,
      amountVsta?: null
    ): ActionRequiredEventFilter;

    "Claimed(address,uint256)"(
      account?: null,
      amountVsta?: null
    ): ClaimedEventFilter;
    Claimed(account?: null, amountVsta?: null): ClaimedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DB_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _usdcAmount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    covertToEther(
      _usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyChangeRoot(
      newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _vestaToken: string,
      _vestingVesta: string,
      _tokenPrice: BigNumberish,
      _totalSupply: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vesta(overrides?: CallOverrides): Promise<BigNumber>;

    vestingVesta(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistUserBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DB_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _usdcAmount: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    covertToEther(
      _usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyChangeRoot(
      newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _vestaToken: string,
      _vestingVesta: string,
      _tokenPrice: BigNumberish,
      _totalSupply: BigNumberish,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vesta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingVesta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistUserBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
