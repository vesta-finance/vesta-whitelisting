/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WhitelistVestingVestaInterface extends utils.Interface {
  contractName: "WhitelistVestingVesta";
  functions: {
    "NAME()": FunctionFragment;
    "SIX_MONTHS()": FunctionFragment;
    "TWO_YEARS()": FunctionFragment;
    "addEntityVesting(address,uint256)": FunctionFragment;
    "claimVSTAToken()": FunctionFragment;
    "entitiesVesting(address)": FunctionFragment;
    "getClaimableVSTA(address)": FunctionFragment;
    "isEntityExits(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SIX_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TWO_YEARS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addEntityVesting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVSTAToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entitiesVesting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableVSTA",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntityExits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SIX_MONTHS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TWO_YEARS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addEntityVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVSTAToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entitiesVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableVSTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntityExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WhitelistVestingVesta extends BaseContract {
  contractName: "WhitelistVestingVesta";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WhitelistVestingVestaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWO_YEARS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addEntityVesting(
      _entity: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimVSTAToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    entitiesVesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        createdDate: BigNumber;
        totalSupply: BigNumber;
        startVestingDate: BigNumber;
        endVestingDate: BigNumber;
        claimed: BigNumber;
      }
    >;

    getClaimableVSTA(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimable: BigNumber }>;

    isEntityExits(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _vstaAddress: string,
      _whitelisting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  TWO_YEARS(overrides?: CallOverrides): Promise<BigNumber>;

  addEntityVesting(
    _entity: string,
    _totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimVSTAToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  entitiesVesting(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      createdDate: BigNumber;
      totalSupply: BigNumber;
      startVestingDate: BigNumber;
      endVestingDate: BigNumber;
      claimed: BigNumber;
    }
  >;

  getClaimableVSTA(
    _entity: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isEntityExits(_entity: string, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _vstaAddress: string,
    _whitelisting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEARS(overrides?: CallOverrides): Promise<BigNumber>;

    addEntityVesting(
      _entity: string,
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimVSTAToken(overrides?: CallOverrides): Promise<void>;

    entitiesVesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        createdDate: BigNumber;
        totalSupply: BigNumber;
        startVestingDate: BigNumber;
        endVestingDate: BigNumber;
        claimed: BigNumber;
      }
    >;

    getClaimableVSTA(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEntityExits(_entity: string, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _vstaAddress: string,
      _whitelisting: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEARS(overrides?: CallOverrides): Promise<BigNumber>;

    addEntityVesting(
      _entity: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimVSTAToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    entitiesVesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableVSTA(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEntityExits(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _vstaAddress: string,
      _whitelisting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWO_YEARS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEntityVesting(
      _entity: string,
      _totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimVSTAToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    entitiesVesting(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableVSTA(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEntityExits(
      _entity: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _vstaAddress: string,
      _whitelisting: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
